- hosts: web
  become: true
  vars_files:
    - vars/default.yml
    - vars/user_vars.yml

  tasks:
    - name: Install prerequis
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude' ]

    - name: Install PHP Extensions
      apt: name={{ item }} update_cache=yes state=latest
      loop: "{{ php_modules }}"
      tags: [ system ]

  #Apache Configuration
    - name: Install LAMP Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'apache2', 'mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php' ]

    - name: Create document root
      file:
        path: "/var/www/{{ item.domain }}"
        state: directory
        owner: "{{item.user}}"
        #group: "www-data"
        mode: '0755'
      with_items: 
        - {domain: client1.com, user: client1}
        - {domain: client2.com, user: client2}
        - {domain: client3.com, user: client3} 
      tags: [ apache]

    - name: Set up Apache virtualhost
      template:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items:
        - { src: 'files/apache.conf.client1.j2', dest: "/etc/apache2/sites-available/client1.com.conf" }
        - { src: 'files/apache.conf.client2.j2', dest: "/etc/apache2/sites-available/client2.com.conf" }
        - { src: 'files/apache.conf.client3.j2', dest: "/etc/apache2/sites-available/client3.com.conf" }
      notify: Reload Apache
      tags: [ apache ]

    - name: apache2 listen on port 8080
      lineinfile:
        dest: /etc/apache2/ports.conf
        line: "Listen 8080"
      notify:
        - Reload Apache
      tags: [ apache_port ]     

    - name: apache2 listen on port 8880
      lineinfile:
        dest: /etc/apache2/ports.conf
        line: "Listen 8880"
      notify:
        - Reload Apache
      tags: [ apache_port ]

    - name: apache2 listen on port 9200
      lineinfile:
        dest: /etc/apache2/ports.conf
        line: "Listen 9200"
      notify:
        - Reload Apache
      tags: [ apache_port ]              

    - name: Enable rewrite module
      shell: /usr/sbin/a2enmod rewrite
      notify: Reload Apache
      tags: [ apache ]

    - name: Enable new site
      shell: /usr/sbin/a2ensite {{ item.conf}}
      notify: Reload Apache
      with_items: 
      - {conf: client1.com.conf}
      - {conf: client2.com.conf}
      - {conf: client3.com.conf} 
      tags: [ apache ]

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      notify: Restart Apache
      tags: [ apache ]

  # MySQL Configuration

    - name: Start MySQL
      systemd:
        name: mysql
        state: started
      tags: [ mysql ]

    - name: Add .my.cnf
      template: src=vars/my.cnf.j2 dest=/root/.my.cnf owner=root group=root mode=0600
      tags: [ mysql ]

    # - name: Reload privilege tables
    #   command: 'mysql -ne "{{ item }}"'
    #   with_items:
    #     - FLUSH PRIVILEGES
    #   changed_when: False
    #   tags: [ mysql ]

    # - name: Remove test database and access to it
    #   command: 'mysql -ne "{{ item }}"'
    #   with_items:
    #     - DROP DATABASE IF EXISTS test
    #     - DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'
    #   changed_when: False
    #   tags: [ mysql ]

    # - name: Reload privilege tables
    #   command: 'mysql -ne "{{ item }}"'
    #   with_items:
    #     - FLUSH PRIVILEGES
    #   changed_when: False
    #   tags: [ mysql ]


    # # - name: Set MySQL root Password
    # #   mysql_user:
    # #     login_host: 'localhost'
    # #     login_user: 'root'
    # #     login_password: ''
    # #     name: 'root'
    # #     password: '{{ mysql_root_password }}'
    # #     state: present
    # #   tags: [ mysql ]
 
    # - name: Create MySQL user for WordPress
    #   mysql_user:
    #     name: "{{ mysql_user }}"
    #     password: "{{ mysql_password }}"
    #     priv: "{{ mysql_db }}.*:ALL"
    #     state: present
    #     login_user: root
    #     login_password: "{{ mysql_root_password }}"
    #   tags: [ mysql ]

    # - name: Creates database for WordPress
    #   mysql_db:
    #     name: "{{ mysql_db }}"
    #     state: present
    #     login_user: root
    #     login_password: "{{ mysql_root_password }}"
    #   tags: [ mysql ]


    # - name: Sets the root password
    #   mysql_user:
    #     name: root
    #     password: "{{ mysql_root_password }}"
    #     login_unix_socket: /var/run/mysqld/mysqld.sock
    #   tags: [ mysql ]

    # # - name: Removes all anonymous user accounts
    # #   mysql_user:
    # #     name: ''
    # #     host_all: yes
    # #     state: absent
    # #     login_user: root
    # #     login_password: "{{ mysql_root_password }}"
    # #   tags: [ mysql ]

    # - name: Removes the MySQL test database
    #   mysql_db:
    #     name: test
    #     state: absent
    #     login_user: root
    #     login_password: "{{ mysql_root_password }}"
    #   tags: [ mysql ]

  # UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp
      tags: [port]

    - name: "UFW - Allow HTTP on port 8080"
      ufw:
        rule: allow
        port: "8080"
        proto: tcp
      tags: [port]

    - name: "UFW - Allow HTTP on port 8880"
      ufw:
        rule: allow
        port: "8880"
        proto: tcp
      tags: [port]

# WordPress Configuration
    - name: Download and unpack latest WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/{{ item.domain }}"
        remote_src: yes
        creates: "/var/www/{{ item.domain}}/wordpress"
      with_items: 
      - {domain: client1.com, user: client1}
      - {domain: client2.com, user: client2}
      - {domain: client3.com, user: client3} 
      tags: [ wordpress ]

    - name: Set ownership
      file:
        path: "/var/www/{{ item.domain }}"
        state: directory
        recurse: yes
        owner: "{{ item.user }}"
      with_items: 
      - {domain: client1.com, user: client1}
      - {domain: client2.com, user: client2}
      - {domain: client3.com, user: client3} 
      tags: [ wordpress ]

    - name: Set permissions for directories
      shell: "/usr/bin/find /var/www/{{ item.domain }}/wordpress/ -type d -exec chmod 750 {} \\;"
      with_items: 
      - {domain: client1.com, user: client1}
      - {domain: client2.com, user: client2}
      - {domain: client3.com, user: client3} 
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find /var/www/{{ item.domain }}/wordpress/ -type f -exec chmod 640 {} \\;"
      with_items: 
      - {domain: client1.com, user: client1}
      - {domain: client2.com, user: client2}
      - {domain: client3.com, user: client3} 
      tags: [ wordpress ]

    - name: Set up wp-config
      template:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items:
        - { src: 'files/wp-config.php.client1.j2', dest: "/var/www/client1.com/wordpress/wp-config.php" }
        - { src: 'files/wp-config.php.client2.j2', dest: "/var/www/client2.com/wordpress/wp-config.php" }
        - { src: 'files/wp-config.php.client3.j2', dest: "/var/www/client3.com/wordpress/wp-config.php" }
      tags: [ wordpress ]

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded
      tags: [php]

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
      tags: [php]